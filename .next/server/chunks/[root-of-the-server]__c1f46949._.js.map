{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 193, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/macko/edu-kinder/app/api/scrape/route.ts"],"sourcesContent":["import * as cheerio from \"cheerio\";\r\n\r\nexport const runtime = \"nodejs\";\r\n\r\n// absolutizácia relatívnych URL\r\nfunction toAbs(base: string, href: string) {\r\n  try { return new URL(href, base).toString(); } catch { return href; }\r\n}\r\n\r\nasync function isPdfUrl(url: string) {\r\n  // nie všetky servery dovoľujú HEAD – skúsime HEAD a fallback na GET (bez sťahovania celého tela)\r\n  try {\r\n    const head = await fetch(url, { method: \"HEAD\", redirect: \"follow\" });\r\n    const ct = head.headers.get(\"content-type\") || \"\";\r\n    if (ct.includes(\"application/pdf\")) return true;\r\n  } catch { /* ignore */ }\r\n\r\n  try {\r\n    const resp = await fetch(url, { method: \"GET\", redirect: \"follow\" });\r\n    const ct = resp.headers.get(\"content-type\") || \"\";\r\n    // nečítame body, len zisťujeme typ\r\n    return ct.includes(\"application/pdf\");\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport async function GET(req: Request) {\r\n  const { searchParams } = new URL(req.url);\r\n  const target = searchParams.get(\"url\");\r\n  if (!target) {\r\n    return new Response(JSON.stringify({ error: \"Missing ?url=\" }), { status: 400 });\r\n  }\r\n\r\n  // Ak niekto dá priamo .pdf, vráť to rovno\r\n  if (target.toLowerCase().endsWith(\".pdf\")) {\r\n    const name = target.split(\"/\").pop() || \"file.pdf\";\r\n    return new Response(JSON.stringify({ count: 1, pdfs: [{ href: target, text: name, filename: name }] }, null, 2), {\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n  }\r\n\r\n  // Stiahni HTML stránky s dátumami\r\n  const resp = await fetch(target, { cache: \"no-store\", redirect: \"follow\" });\r\n  if (!resp.ok) {\r\n    return new Response(JSON.stringify({ error: `Fetch failed: ${resp.status}` }), { status: 502 });\r\n  }\r\n\r\n  const html = await resp.text();\r\n  const $ = cheerio.load(html);\r\n\r\n  // Nazbieraj všetky odkazy\r\n  const rawLinks: { href: string; text: string }[] = [];\r\n  $(\"a[href]\").each((_, a) => {\r\n    const href = ($(a).attr(\"href\") || \"\").trim();\r\n    if (!href) return;\r\n    const abs = toAbs(target, href);\r\n    const text = ($(a).text() || \"\").trim();\r\n    rawLinks.push({ href: abs, text });\r\n  });\r\n\r\n  // 1) priame .pdf\r\n  const direct = rawLinks.filter(l => l.href.toLowerCase().endsWith(\".pdf\"));\r\n\r\n  // 2) „dátumové“ odkazy bez .pdf – skúsime overiť obsah\r\n  const maybeDates = rawLinks.filter(\r\n    l =>\r\n      !l.href.toLowerCase().endsWith(\".pdf\") &&\r\n      // heuristika: text obsahuje dátumový pattern\r\n      /(\\d{1,2}\\.\\d{1,2}\\.\\d{4}|\\d{1,2}\\.\\d{1,2}\\.\\d{2,4})/.test(l.text)\r\n  );\r\n\r\n  // limituj paralelizmus, nech netrápime server\r\n  const limit = 6;\r\n  const checked: { href: string; text: string }[] = [];\r\n  for (let i = 0; i < maybeDates.length; i += limit) {\r\n    const batch = maybeDates.slice(i, i + limit);\r\n    const results = await Promise.all(\r\n      batch.map(async (l) => (await isPdfUrl(l.href)) ? l : null)\r\n    );\r\n    checked.push(...results.filter(Boolean) as any[]);\r\n  }\r\n\r\n  // zloženie + deduplikácia\r\n  const all = [...direct, ...checked];\r\n  const uniq = Array.from(new Map(all.map(l => [l.href, l])).values())\r\n    // pokus o zoradenie podľa dátumu v texte/názve\r\n    .sort((a, b) => (b.text || \"\").localeCompare(a.text || \"\"));\r\n\r\n  const pdfs = uniq.map(l => {\r\n    const filename = l.href.split(\"/\").pop() || \"file.pdf\";\r\n    const m = (filename + \" \" + l.text).match(\r\n      /(\\d{1,2}[.\\-]\\d{1,2}[.\\-]\\d{2,4})(?:\\s*[\\-–]\\s*(\\d{1,2}[.\\-]\\d{1,2}[.\\-]\\d{2,4}))?/i\r\n    );\r\n    return { href: l.href, text: l.text, filename, dateMatch: m ? m[0] : undefined };\r\n  });\r\n\r\n  return new Response(JSON.stringify({ count: pdfs.length, pdfs }, null, 2), {\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n  });\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}